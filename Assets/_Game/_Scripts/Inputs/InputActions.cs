//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/_Game/_Scripts/Inputs/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""Player_A"",
            ""id"": ""786cb4e2-b0a2-4ce8-918e-b7a0474c1136"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""88e9471d-781e-4f0b-8aa3-dbd159b6c717"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""07b12422-df49-432c-abf1-85c8df98a3dc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ColorWheel"",
                    ""type"": ""Value"",
                    ""id"": ""39e0969a-7a26-436d-a3a5-8fdfba1c13c4"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""8c35f973-d9af-4cc1-b2e5-9337f851cf0c"",
                    ""path"": ""2DVector(mode=1)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""ae14f482-95a7-4d60-9b2b-158df275d6d2"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""d0605233-904a-48d6-a077-5bced93fe9b3"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""64b13f36-bb82-4ac7-bc7b-c2de694e6b03"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""ColorWheel"",
                    ""id"": ""b065ec29-72c4-4f8b-be76-087622e00215"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ColorWheel"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""ec139c0b-67da-4559-9a87-d0dbbe954937"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""ColorWheel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""7e59c3f0-3d44-468b-88df-9742a7a5c046"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""ColorWheel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""11f246a4-6f3c-400d-8b09-17bf2ba09271"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""ColorWheel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""01b8c74f-3f5f-43bb-9732-c436d2780ab6"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""ColorWheel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""36850d83-ec0a-4a07-9337-434828416b4f"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Player_B"",
            ""id"": ""d28fcdc1-ee3f-47d1-8aed-6b11fc7f4200"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""7c962c9d-a37d-456a-a573-4b57512244fa"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""78a6811c-7ebc-46a7-b3f3-3998c41d037a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ColorWheel"",
                    ""type"": ""Value"",
                    ""id"": ""cd25e7ac-d956-4610-92e8-98de8468904f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Left Stick"",
                    ""id"": ""8e5a2aa1-f876-4a5c-9d1f-43e7bcf92f4c"",
                    ""path"": ""2DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""2850c7ef-d78d-4b1b-9269-425926581982"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Joystick"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""27668e37-e6d4-49c1-b86c-6d34fcade404"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Joystick"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""45c87b85-e9d2-4ede-aab9-3fcce226a421"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Joystick"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f359dcf2-42cb-4d55-85ce-0300afe9bdcb"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Joystick"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ee2fb93b-b4bb-4bee-9e11-49edf4f91d49"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Joystick"",
                    ""action"": ""ColorWheel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""2fb757d7-f7d3-4273-884d-876a66666c50"",
            ""actions"": [],
            ""bindings"": []
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Joystick"",
            ""bindingGroup"": ""Joystick"",
            ""devices"": [
                {
                    ""devicePath"": ""<Joystick>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Player_A
        m_Player_A = asset.FindActionMap("Player_A", throwIfNotFound: true);
        m_Player_A_Movement = m_Player_A.FindAction("Movement", throwIfNotFound: true);
        m_Player_A_Jump = m_Player_A.FindAction("Jump", throwIfNotFound: true);
        m_Player_A_ColorWheel = m_Player_A.FindAction("ColorWheel", throwIfNotFound: true);
        // Player_B
        m_Player_B = asset.FindActionMap("Player_B", throwIfNotFound: true);
        m_Player_B_Movement = m_Player_B.FindAction("Movement", throwIfNotFound: true);
        m_Player_B_Jump = m_Player_B.FindAction("Jump", throwIfNotFound: true);
        m_Player_B_ColorWheel = m_Player_B.FindAction("ColorWheel", throwIfNotFound: true);
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player_A
    private readonly InputActionMap m_Player_A;
    private IPlayer_AActions m_Player_AActionsCallbackInterface;
    private readonly InputAction m_Player_A_Movement;
    private readonly InputAction m_Player_A_Jump;
    private readonly InputAction m_Player_A_ColorWheel;
    public struct Player_AActions
    {
        private @InputActions m_Wrapper;
        public Player_AActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Player_A_Movement;
        public InputAction @Jump => m_Wrapper.m_Player_A_Jump;
        public InputAction @ColorWheel => m_Wrapper.m_Player_A_ColorWheel;
        public InputActionMap Get() { return m_Wrapper.m_Player_A; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Player_AActions set) { return set.Get(); }
        public void SetCallbacks(IPlayer_AActions instance)
        {
            if (m_Wrapper.m_Player_AActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_Player_AActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_Player_AActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_Player_AActionsCallbackInterface.OnMovement;
                @Jump.started -= m_Wrapper.m_Player_AActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_Player_AActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_Player_AActionsCallbackInterface.OnJump;
                @ColorWheel.started -= m_Wrapper.m_Player_AActionsCallbackInterface.OnColorWheel;
                @ColorWheel.performed -= m_Wrapper.m_Player_AActionsCallbackInterface.OnColorWheel;
                @ColorWheel.canceled -= m_Wrapper.m_Player_AActionsCallbackInterface.OnColorWheel;
            }
            m_Wrapper.m_Player_AActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @ColorWheel.started += instance.OnColorWheel;
                @ColorWheel.performed += instance.OnColorWheel;
                @ColorWheel.canceled += instance.OnColorWheel;
            }
        }
    }
    public Player_AActions @Player_A => new Player_AActions(this);

    // Player_B
    private readonly InputActionMap m_Player_B;
    private IPlayer_BActions m_Player_BActionsCallbackInterface;
    private readonly InputAction m_Player_B_Movement;
    private readonly InputAction m_Player_B_Jump;
    private readonly InputAction m_Player_B_ColorWheel;
    public struct Player_BActions
    {
        private @InputActions m_Wrapper;
        public Player_BActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Player_B_Movement;
        public InputAction @Jump => m_Wrapper.m_Player_B_Jump;
        public InputAction @ColorWheel => m_Wrapper.m_Player_B_ColorWheel;
        public InputActionMap Get() { return m_Wrapper.m_Player_B; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Player_BActions set) { return set.Get(); }
        public void SetCallbacks(IPlayer_BActions instance)
        {
            if (m_Wrapper.m_Player_BActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_Player_BActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_Player_BActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_Player_BActionsCallbackInterface.OnMovement;
                @Jump.started -= m_Wrapper.m_Player_BActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_Player_BActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_Player_BActionsCallbackInterface.OnJump;
                @ColorWheel.started -= m_Wrapper.m_Player_BActionsCallbackInterface.OnColorWheel;
                @ColorWheel.performed -= m_Wrapper.m_Player_BActionsCallbackInterface.OnColorWheel;
                @ColorWheel.canceled -= m_Wrapper.m_Player_BActionsCallbackInterface.OnColorWheel;
            }
            m_Wrapper.m_Player_BActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @ColorWheel.started += instance.OnColorWheel;
                @ColorWheel.performed += instance.OnColorWheel;
                @ColorWheel.canceled += instance.OnColorWheel;
            }
        }
    }
    public Player_BActions @Player_B => new Player_BActions(this);

    // UI
    private readonly InputActionMap m_UI;
    private IUIActions m_UIActionsCallbackInterface;
    public struct UIActions
    {
        private @InputActions m_Wrapper;
        public UIActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void SetCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterface != null)
            {
            }
            m_Wrapper.m_UIActionsCallbackInterface = instance;
            if (instance != null)
            {
            }
        }
    }
    public UIActions @UI => new UIActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    private int m_JoystickSchemeIndex = -1;
    public InputControlScheme JoystickScheme
    {
        get
        {
            if (m_JoystickSchemeIndex == -1) m_JoystickSchemeIndex = asset.FindControlSchemeIndex("Joystick");
            return asset.controlSchemes[m_JoystickSchemeIndex];
        }
    }
    public interface IPlayer_AActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnColorWheel(InputAction.CallbackContext context);
    }
    public interface IPlayer_BActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnColorWheel(InputAction.CallbackContext context);
    }
    public interface IUIActions
    {
    }
}
